#!/bin/sh
#set -x
#IS_DEBUG=1

IS_ROOT=/tmp/is-root
DL_DIR=${IS_ROOT}/tmp/dl
LISTS_DIR_O=/tmp/opkg-lists
LISTS_DIR=${IS_ROOT}${LISTS_DIR_O}
OPKG_CONF_DIR=${IS_ROOT}/etc/opkg
FEEDS_SERVER=https://istore.linkease.com/repo
ARCH=`opkg -f /dev/null print-architecture | grep -v 'arch all' | grep -v 'arch noarch' | cut -d ' ' -f2`

action=${1}
shift

is_init() {
    mkdir -p ${DL_DIR} ${LISTS_DIR} ${IS_ROOT}/etc ${IS_ROOT}/var

    cat /etc/opkg.conf | grep -v lists_dir | grep -v check_signature > ${IS_ROOT}/etc/opkg.conf

    cp ${IS_ROOT}/etc/opkg.conf ${IS_ROOT}/etc/opkg_o.conf

    echo >> ${IS_ROOT}/etc/opkg.conf
    echo "lists_dir ext ${LISTS_DIR}" >> ${IS_ROOT}/etc/opkg.conf
    echo >> ${IS_ROOT}/etc/opkg_o.conf
    echo "lists_dir ext ${LISTS_DIR_O}" >> ${IS_ROOT}/etc/opkg_o.conf

    [ -e ${IS_ROOT}/var/lock ] || {
        cp -a /etc/opkg ${IS_ROOT}/etc/

        ln -s /var/lock ${IS_ROOT}/var/lock
    }
}

opkg_wrap() {
    OPKG_CONF_DIR=${OPKG_CONF_DIR} opkg -f ${IS_ROOT}/etc/opkg.conf "$@"
}

update() {
    uclient-fetch -O ${OPKG_CONF_DIR}/meta.conf "${FEEDS_SERVER}/all/meta.conf" && \
    uclient-fetch -O ${OPKG_CONF_DIR}/all.conf "${FEEDS_SERVER}/all/isfeeds.conf" && \
    uclient-fetch -O ${OPKG_CONF_DIR}/arch.conf "${FEEDS_SERVER}/${ARCH}/isfeeds.conf" && \
    opkg -f ${IS_ROOT}/etc/opkg_o.conf --offline-root ${IS_ROOT} update

    return 0
}

check_mtime() {
    find ${OPKG_CONF_DIR}/arch.conf -mtime -1 2>/dev/null | grep -q .  || update
}

wrapped_in_update() {
    check_mtime || return 1
    opkg_wrap "$@" && return 0
    local idle_t=$((`date '+%s'` - `date -r ${IS_ROOT}/.last_force_ts '+%s' 2>/dev/null || echo '0'`))
    [ $idle_t -gt 120 ] || return 1
    update || return 1
    touch ${IS_ROOT}/.last_force_ts
    opkg_wrap "$@"
}

new_upgrade() {
    local metapkg=`echo "$@" | sed 's/ /\n/g' | grep -F app-meta-`
    if [ -n "$metapkg" ] && opkg_wrap info $metapkg | grep -qF not-installed ; then
        true
    else
        local idle_t=$((`date '+%s'` - `date -r ${IS_ROOT}/.last_force_ts '+%s' 2>/dev/null || echo '0'`))
        if [ $idle_t -gt 120 ]; then
            update && touch ${IS_ROOT}/.last_force_ts
        fi
    fi
    wrapped_in_update upgrade "$@"
}

opkg_list_installed_packages() {
    target=$1
    case $target in
        "preinstalled")
            OPKG_INFO_DIR="/rom/usr/lib/opkg/info"
        ;;
        "userinstalled")
            OPKG_INFO_DIR="/overlay/upper/usr/lib/opkg/info"
        ;;
        "allinstalled")
            OPKG_INFO_DIR="/usr/lib/opkg/info"
        ;;
        *)
            echo "invalid target"
            exit
        ;;
    esac

    awk -v D="cd $OPKG_INFO_DIR &&" 'BEGIN {
        C=D"ls *.list"
        S="sort -n"
        while(C|getline>0) {
            P=substr(F=$1,1,length($1)-5)
            J=D"du -sk $(cat "F")"
            s=0
            while(J|getline>0) s+=$1
            close(J)
            t+=s
            print s" "P|S
        }
        close(S)
    }'
}

ipk_build() {
    PKG_NAME_TEMP=$1
    IPK_OUTPUT_DIR=$2

    UCI_BAK_DIR="/etc/istore/uci-defaults_bak/"
    UCI_DEF_DIR="etc/uci-defaults"
    OPKG_INFO_DIR="/usr/lib/opkg/info/"

    [ "A" != "A${PKG_NAME_TEMP}" ] || exit
    #get real pkg name in opkg
    PKG_NAME_TEMP=`cat ${IS_ROOT}/all_installed_package.list | sort -u | grep "^${PKG_NAME_TEMP}" | head -n 1`
    [ "A" != "A${PKG_NAME_TEMP}" ] || exit

    PKG_NAME=`cat ${OPKG_INFO_DIR}${PKG_NAME_TEMP}.control | grep "^Package: " |  cut -d ' ' -f2`
    PKG_VER=`cat ${OPKG_INFO_DIR}${PKG_NAME}.control | grep "^Version: " |  cut -d ' ' -f2`
    PKG_ARCH=`cat ${OPKG_INFO_DIR}${PKG_NAME}.control | grep "^Architecture: " |  cut -d ' ' -f2`
    IPK_FILE_NAME="${PKG_NAME}_${PKG_VER}_${PKG_ARCH}"

    rm -rf ${IS_ROOT}/${IPK_FILE_NAME}
    mkdir -p ${IS_ROOT}/${IPK_FILE_NAME}

    #(1)make CONTROL dir; (2)copy control file to dir
    cd ${IS_ROOT}/${IPK_FILE_NAME}
    mkdir -p CONTROL
    for control_file in `ls  ${OPKG_INFO_DIR}${PKG_NAME}.* | grep -v ".list$"`; do
        file=${control_file##*/}
        suffix=${file##*.}
        cp ${control_file} CONTROL/${suffix}
    done

    #(1)make DATA depend dir; (2)copy uci-defaults_bak file to dir; (3)copy other file to dir
    for pkgfile in `cat ${OPKG_INFO_DIR}${PKG_NAME}.list | cut -b 2-`; do
        file=${pkgfile##*/}
        path=${pkgfile%/*}
        mkdir -p ${path}
        if [ `echo "${path}" | grep "^${UCI_DEF_DIR}"` ]; then
            cp "${UCI_BAK_DIR}${file}" "${pkgfile}"
        else
            cp "/${pkgfile}" "${pkgfile}"
        fi
    done
    cd -

    #call ipkg-build script to build ipk
    ipkg-build ${IS_ROOT}/${IPK_FILE_NAME} ${IPK_OUTPUT_DIR}
    echo "${IPK_FILE_NAME}.ipk" >> ${IPK_OUTPUT_DIR}/appdepipk.list

    [ -n "${IS_DEBUG}" ] || rm -rf ${IS_ROOT}/${IPK_FILE_NAME}
}

backup() {
    [ "A$1" == "A" ] || BACKUP_PATH=$1

    #1.add all istore self data to sysupgrade config file,
    #sysupgrade will backup/restore it auto when flash new firmware
    echo "/etc/.app_store.id" > /lib/upgrade/keep.d/luci-app-store
    cat /usr/lib/opkg/info/luci-app-store.list >> /lib/upgrade/keep.d/luci-app-store
    echo "/etc/rc.d/S45istore" >> /lib/upgrade/keep.d/luci-app-store
    echo "/etc/istore/uci-defaults_bak" >> /lib/upgrade/keep.d/luci-app-store
    echo "/etc/istore/app.list" >> /lib/upgrade/keep.d/luci-app-store

    #2.backup all installed package lists to config file
    update  #if want not depend this, need record package list by istore to file when is-opkg update

    #get feed list
    opkg_conf_list="meta all arch"
    feed_name_list=""
    for conf in ${opkg_conf_list}; do
        feed_name=`cat ${OPKG_CONF_DIR}/${conf}.conf | cut -d ' ' -f2`
        feed_name_list="${feed_name} ${feed_name_list}"
    done
    [ -n "${IS_DEBUG}" ] && echo ${feed_name_list}

    istore_package_list=""
    #get istore package list
    for feed_name in ${feed_name_list}; do
        package_list=`cat ${LISTS_DIR}/${feed_name} | gunzip | grep "^Package: " | cut -d ' ' -f2`
        istore_package_list="${package_list} ${istore_package_list}"
    done
    [ -n "${IS_DEBUG}" ] && echo ${istore_package_list}

    #write istore package list to file
    echo ${istore_package_list} | tr " " "\n" > ${IS_ROOT}/istore_support_package.list

    #write all installed package list to file
    opkg_list_installed_packages "allinstalled" 2>/dev/null | cut -d ' ' -f2 | sort -u > ${IS_ROOT}/all_installed_package.list

    #write user installed package list to file
    opkg_list_installed_packages "userinstalled" 2>/dev/null | cut -d ' ' -f2 | sort -u > ${IS_ROOT}/user_installed_package.list

    #write system pre installed package list to file
    opkg_list_installed_packages "preinstalled" 2>/dev/null | cut -d ' ' -f2 | sort -u > ${IS_ROOT}/pre_installed_package.list

    #write installed package list by istore feed to file
    cat ${IS_ROOT}/istore_support_package.list ${IS_ROOT}/user_installed_package.list | \
        sort -n | uniq -d > ${IS_ROOT}/istore_installed_package.list

    #if no input backup path, only back app.list
    mkdir -p /etc/istore
    cp ${IS_ROOT}/istore_installed_package.list /etc/istore/app.list
    echo "backup installed package list to /etc/istore/app.list"
    [ -n "${BACKUP_PATH}" ] || exit

    #write installed packages and depends list by istore feed to file by depend sequence
    appdep_list=""
    temp_list=`cat ${IS_ROOT}/istore_installed_package.list | sed 's/^/\t/'`
    while [ "A" != "A${temp_list}" ]
    do
        #get real pkg name
        for PKG_NAME_TEMP in ${temp_list}; do
            REAL_PKG_NAME=`cat ${IS_ROOT}/all_installed_package.list | sort -u | grep "^${PKG_NAME_TEMP}" | head -n 1`
            if [ ${REAL_PKG_NAME} != ${PKG_NAME_TEMP} ]; then
                temp_list=`echo "${temp_list}" | sed 's/'"${PKG_NAME_TEMP}"'/'"${REAL_PKG_NAME}"'/'`
            fi
        done

        appdep_list=`echo -e "${temp_list}\n${appdep_list}"`
        [ -n "${IS_DEBUG}" ] && echo -e "temp_list:\n""${temp_list}"
        [ -n "${IS_DEBUG}" ] && echo -e "appdep_list:\n""${appdep_list}"

        temp_list=`echo "${temp_list}" | xargs -t opkg depends | grep -v "depends on:" | sort -u`
    done

    appdep_list_all=`echo "${appdep_list}" | cut -f2 | grep -v "^$" | awk '!seen[$0]++'`
    [ -n "${IS_DEBUG}" ] && echo -e "appdep_list_all:\n""${appdep_list_all}"
    echo "${appdep_list_all}" > ${IS_ROOT}/appdep.list


    #3.rebuild all istore installed package to ipk and backup to userdata partation
    if [ ! -d "${BACKUP_PATH}" ];then
        echo "invalid backup path, can not backup ipk"
        exit
    fi
    cp ${IS_ROOT}/istore_installed_package.list ${BACKUP_PATH}/app.list
    cp ${IS_ROOT}/appdep.list ${BACKUP_PATH}/appdep.list

    #only backup non pre installed ipk
    cp ${IS_ROOT}/appdep.list ${IS_ROOT}/appdep_strip.list
    for pre_installed_pkg in `cat ${IS_ROOT}/appdep.list ${IS_ROOT}/pre_installed_package.list | sort -n | uniq -d`; do
        sed -i '/'"$pre_installed_pkg"'/d' ${IS_ROOT}/appdep_strip.list
    done

    rm -f ${BACKUP_PATH}/appdepipk.list
    for pkg_name in `cat ${IS_ROOT}/appdep_strip.list`; do
        echo "build ipk"
        ipk_build ${pkg_name} ${BACKUP_PATH}
    done
}

restore() {
    echo "TODO: restore"
    if [ "A$1" == "A" ]; then
        echo "install package by /etc/istore/app.list"
        update
        for app in `cat /etc/istore/app.list`; do
            #skip resotre istore self
            [ "A${app}" == "A""luci-app-store" ] && continue
            opkg_wrap install ${app}
        done
        exit
    else
        BACKUP_PATH=$1
    fi

    if [ ! -d "${BACKUP_PATH}" ];then
        echo "invalid backup path, can not restore ipk"
        exit
    fi

    if [ ! -f "${BACKUP_PATH}/appdep.list" ];then
        echo "no available appdep.list, can not restore ipk"
        exit
    fi

    #install ipk by backup path
    for app in `cat ${BACKUP_PATH}/appdepipk.list`; do
        opkg_wrap install ${BACKUP_PATH}/${app}
    done
}

usage() {
    echo "usage: is-opkg sub-command [arguments...]"
    echo "where sub-command is one of:"
    echo "      update                  Update list of available packages"
    echo "      upgrade <pkgs>          Upgrade packages"
    echo "      install <pkgs>          Install package(s)"
    echo "      remove <pkgs>           Remove package(s)"
    echo "      backup [dir]            Backup all installed package(s) to [directory]"
    echo "      restore [dir]           Restore package(s) by [directory]"
}

is_init >/dev/null 2>&1

case $action in
    "update")
        update
    ;;
    "install")
        wrapped_in_update install "$@"
    ;;
    "upgrade")
        new_upgrade "$@"
    ;;
    "remove")
        opkg_wrap --autoremove --force-removal-of-dependent-packages remove "$@"
    ;;
    "backup")
        backup "$@"
    ;;
    "restore")
        restore "$@"
    ;;
    *)
        usage
    ;;
esac
